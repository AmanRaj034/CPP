<snippet>
	<content><![CDATA[
#include "bits/stdc++.h"
using namespace std;
#define ll long long int
#define un unsigned long long
#define all(v) v.begin(),v.end()
#define pb push_back
#define sz(x) ((int)(x).size())

const ll M = 1e9 + 7;

namespace _DEBUG_UTIL_ { void print(const char *x) {} void print(bool x) { cout << (x ? "T" : "F"); } void print(char x) { cout << '\'' << x << '\''; } void print(signed short int x) { cout << x; } void print(unsigned short int x) { cout << x; } void print(signed int x) { cout << x; } void print(unsigned int x) { cout << x; } void print(signed long int x) { cout << x; } void print(unsigned long int x) { cout << x; } void print(signed long long int x) { cout << x; } void print(unsigned long long int x) { cout << x; } void print(float x) { cout << x; } void print(double x) { cout << x; } void print(long double x) { cout << x; } void print(string x) { cout << '\"' << x << '\"'; } template <size_t N> void print(bitset<N> x) { cout << x; } void print(vector<bool> x) { int f = 0; cout << '{'; for (bool i : x) { cout << (f++ ? "," : ""); cout << (i ? "T" : "F"); } cout << "}"; } /* Template Datatypes Declarations */ template <typename T> void print(T x); template <typename T> void print(vector<vector<T>> mat); template <typename T, size_t N> void print(T (&arr)[N]); template <typename T, size_t N, size_t M> void print(T (&mat)[N][M]); template <typename F, typename S> void print(pair<F, S> x); template <typename T> void print(priority_queue<T> pq); template <typename T> void print(priority_queue<T, vector<T>, greater<T>> pq); template <typename T> void print(stack<T> st); template <typename T> void print(queue<T> q); /* Template Datatypes Definitions */ template <typename T> void print(T x) { int f = 0; cout << '{'; for (auto i : x) cout << (f++ ? "," : ""), print(i); cout << "}"; } template <typename T> void print(vector<vector<T>> mat) { int f = 0; cout << "{\n"; for (auto i : mat) cout << (f++ ? ",\n" : ""), print(i); cout << "}\n"; } template <typename T, size_t N> void print(T (&arr)[N]) { int f = 0; cout << '{'; for (auto &i : arr) cout << (f++ ? "," : ""), print(i); cout << "}"; } template <typename T, size_t N, size_t M> void print(T (&mat)[N][M]) { int f = 0; cout << "{\n"; for (auto &i : mat) cout << (f++ ? ",\n" : ""), print(i); cout << "}\n"; } template <typename F, typename S> void print(pair<F, S> x) { cout << '('; print(x.first); cout << ','; print(x.second); cout << ')'; } template <typename T> void print(priority_queue<T> pq) { int f = 0; cout << '{'; while (!pq.empty()) cout << (f++ ? "," : ""), print(pq.top()), pq.pop(); cout << "}"; } template <typename T> void print(priority_queue<T, vector<T>, greater<T>> pq) { int f = 0; cout << '{'; while (!pq.empty()) cout << (f++ ? "," : ""), print(pq.top()), pq.pop(); cout << "}"; } template <typename T> void print(stack<T> st) { int f = 0; cout << '{'; while (!st.empty()) cout << (f++ ? "," : ""), print(st.top()), st.pop(); cout << "}"; } template <typename T> void print(queue<T> q) { int f = 0; cout << '{'; while (!q.empty()) cout << (f++ ? "," : ""), print(q.front()), q.pop(); cout << "}"; } /* Printer */ template <typename T> void printer(const char *name, T &&head) { cout << name << " = "; print(head); cout << "]\n"; } template <typename T, typename... V> void printer(const char *names, T &&head, V &&...tail) { int bracket = 0, i = 0; while (names[i] != ',' or bracket != 0) { if (names[i] == '(') bracket++; else if (names[i] == ')') bracket--; i++; } cout.write(names, i) << " = "; print(head); cout << " ||"; printer(names + i + 1, tail...); } /* PrinterArr */ template <typename T> void printerArr(const char *name, T arr[], int N) { cout << name << " : {"; for (int i = 0; i < N; i++) { cout << (i ? "," : ""), print(arr[i]); } cout << "}]\n"; } }
#ifndef ONLINE_JUDGE
#define debug(...) cout << __LINE__ << ": [", _DEBUG_UTIL_::printer(#__VA_ARGS__, __VA_ARGS__)
#define debugArr(arr, n) cout << __LINE__ << ": [", _DEBUG_UTIL_::printerArr(#arr, arr, n)
#else
#define debug(x...)
#define debugArr(arr, n)
#endif


void solve()
{
    $1
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    int t = 1;
    cin >> t;
    for (int i = 1; i <= t; ++i)
    {
#ifndef ONLINE_JUDGE
        cout << "\n______Test : " << i << "\n\n";
#endif
        solve();
    }
#ifndef ONLINE_JUDGE
    cout << "\nDone!";
#endif
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpp.head</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
