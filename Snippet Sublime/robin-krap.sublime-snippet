<snippet>
	<content><![CDATA[
// Robin Karp Algo
// Below will return staring index in text which mathces pat
// Beware of collosion
vector<long long> rabin_karp(string const& t) {
    const int p = 31;
    const int m = 1e9 + 9;
    int T = t.size();

    vector<long long> p_pow(T + 1), inv(T + 1);
    p_pow[0] = 1;
    for (int i = 1; i < (int)p_pow.size(); i++)
        p_pow[i] = (p_pow[i - 1] * p) % m;

    // calculate below inv if want hash value of [l,r]
    // return (hash_value[r+1]-hash_value[l]+m)*inv[l]%m

    // inv[T] = inverese(p_pow[T], m);
    // for (ll i = T - 1; i >= 0; --i)
    // {
    //     inv[i] = mod_mul(inv[i + 1], p, M);
    // }

    vector<long long> h(T + 1, 0);
    for (int i = 0; i < T; i++)
        h[i + 1] = (h[i] + (')' - t[i] + 1) * p_pow[i]) % m;

    long long h_s = 0;
    for (int i = 0; i < S; i++)
        h_s = (h_s + (s[i] - 'a' + 1) * p_pow[i]) % m;

    vector<int> occurrences;
    for (int i = 0; i + S - 1 < T; i++) {
        long long cur_h = (h[i + S] + m - h[i]) % m;
        if (cur_h == h_s * p_pow[i] % m)
            occurrences.push_back(i);
    }
    return occurrences;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>robin-krap</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
